'*':
  # self  
  '- TODO ★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★  待处理':
    'prefix': 'TODO-self'
    'body': '// TODO: ★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★ '
  '- PS:  说明':
    'prefix': 'PS-self'
    'body': 'PS: '
  '- DefDec:  定义说明':
    'prefix': 'DefDec-self'
    'body': 'DefDec: '
  '- Describe:  描述':
    'prefix': 'Describe-self'
    'body': 'Describe: '
  '- Feature:  特性':
    'prefix': 'Feature-self'
    'body': 'Feature: '
  '- Enum:  枚举':
    'prefix': 'Enum-self'
    'body': 'Enum: '
  '- Sort:  类别分类':
    'prefix': 'Sort-self'
    'body': 'Sort: '
  '- Example:  例子':
    'prefix': 'Example-self'
    'body': 'Example: '
  '- Relate:  相关的':
    'prefix': 'Relate-self'
    'body': 'Relate: '
  '- Expand:  扩展':
    'prefix': 'Expand-self'
    'body': 'Expand: '
  '- More:  更多':
    'prefix': 'More-self'
    'body': 'More: '
  '- Accu:  总结,积累':
    'prefix': 'Accu-self'
    'body': 'Accu: '
  '- Self:  自己相关':
    'prefix': 'Self-self'
    'body': 'Self: '
  '- Q&I:  问题及想法':
    'prefix': 'Question-Idea-self'
    'body': 'Q&I: '
  '- Q&A:  问题及方法':
    'prefix': 'Question-Answer-self'
    'body': 'Q&A: '
    
  '- Extend:  继承':
    'prefix': 'Extend-self'
    'body': 'Extend: '
  '- Static:  静态属性':
    'prefix': 'Static-self'
    'body': 'Static: '
  '- Proto:  原型属性':
    'prefix': 'Proto-self'
    'body': 'Proto: '
  '- Instance:  类的实例':
    'prefix': 'Instance-self'
    'body': 'Instance: '
  '- Member:  ‹对象的›成员':
    'prefix': 'Member-self'
    'body': 'Member: '
  '- Arguments:  参数':
    'prefix': 'Arguments-self'
    'body': 'Arguments: '
  '- Return:  返回值':
    'prefix': 'Return-self'
    'body': 'Return: '
  '- Input:  输入':
    'prefix': 'Input-self'
    'body': 'Input: '
  '- Output:  输出':
    'prefix': 'Output-self'
    'body': 'Output: '
    
  '- Env:  环境':
    'prefix': 'Env-self'
    'body': 'Env: '
  '- Sit:  网站、站点':
    'prefix': 'Sit-self'
    'body': 'Sit: '
  '- Win:  窗口':
    'prefix': 'Win-self'
    'body': 'Win: '
  '- Pag:  页面/文档':
    'prefix': 'Pag-self'
    'body': 'Pag: '
  '- Elm:  DOM/元素':
    'prefix': 'Elm-self'
    'body': 'Elm: '
  '- Atr:  元素属性':
    'prefix': 'Atr-self'
    'body': 'Atr: '
  '- Evt:  事件':
    'prefix': 'Evt-self'
    'body': 'Evt: '
  '- Kit:  工具/方法':
    'prefix': 'Kit-self'
    'body': 'Kit: '
  '- MoIn:  更多':
    'prefix': 'MoIn-self'
    'body': 'MoIn: '
    
  '- NdA  不可直接使用':
    'prefix': 'not-direct-access-self'
    'body': 'NdA'
  # 符号
  '- ‹$1›  括号1':
    'prefix': 'kh1-fh'
    'body': '‹$1›'
  '- «$1»  括号2':
    'prefix': 'kh2-fh'
    'body': '«$1»'
  # 常用词  
  '- template  模板':
    'prefix': 'template-word'
    'body': 'template'
  '- module  模块':
    'prefix': 'module-word'
    'body': 'module'
  '- option  选项':
    'prefix': 'option-word'
    'body': 'option'
  '- alias  别名':
    'prefix': 'alias-word'
    'body': 'alias'
  '- params  参数':
    'prefix': 'params-word'
    'body': 'params'
  '- response  响应':
    'prefix': 'response-word'
    'body': 'response'
  '- request  请求':
    'prefix': 'request-word'
    'body': 'request'
  '- query  查询':
    'prefix': 'query-word'
    'body': 'query'
  '- prop  属性,组成部分':
    'prefix': 'prop-word'
    'body': """prop""" 
  '- attr  特性,修饰部分':
    'prefix': 'attr-word'
    'body': """attr""" 
  # 代码 
  '-* <tag>$1</tag>  双标记':
    'prefix': 'tag-couple'
    'body': '<${1:tag}></${1:tag}>'
  '-* <tag/>  单标记':
    'prefix': 'tag-single'
    'body': '<${1:tag} />'

'.source.js':
  '- window.screenLeft':
    'prefix': 'screenLeft-window'
    'body': 'window.screenLeft'
  '- window.screenTop':
    'prefix': 'screenTop-window'
    'body': 'window.screenTop'
  '- window.screenX':
    'prefix': 'screenX-window'
    'body': 'window.screenX'
  '- window.screenY':
    'prefix': 'screenY-window'
    'body': 'window.screenY'


# 使用说明 
# e.g.:
#   '-console.log()':            # 提示 显示为
#     'prefix': 'log'            # 激活提示的词 
#     'body': 'console.log($1);' # 最终的结果 
# 语法注释
#   $1 表示光标的默认位置
#   $2 按下 tab 键,光标跳到的第二个位置,以此类推
#   ${1:name} 表示第一次会将 name 选中
#   \n表示换行 \t tab缩进
#   提示 显示 字符开始不可使用下划线符号_
#   """内容""" 创建保持格式的代码块 「"""...""" 代替'...'」
# 当激活字符一样时,后面的会覆盖掉前面的.
# 自定义Snippets的扩展词时,定义的格式的确定
#   在要定义的文档类型下,ctrl-Shift-p 输入代码  Editor: Log Cursor Scope
#   弹出字符如 txt格式的为 text.plain ,则.text.plain类似于.source.js表示一种文件格式
#   注意在前面加一个点.
# 自定义的分类: 
#   按大类划分文档: 避免一个文件中条目过多  
#   文档内的规则: 
#     -obj/Object .xxx  xxxx 类简写或类 
#     -word 单词
#     -eN   事件名 
#     -operat  操作符
#     -xxx  其他 
# Question:
#   

# 原始文档说明 留存 
# Your snippets
#
# Atom snippets allow you to enter a simple prefix in the editor and hit tab to
# expand the prefix into a larger code block with templated values.
#
# You can create a new snippet in this file by typing "snip" and then hitting
# tab.
#
# An example CoffeeScript snippet to expand log to console.log:
#
# '.source.coffee':
#   'Console log':
#     'prefix': 'log'
#     'body': 'console.log $1'
#
# Each scope (e.g. '.source.coffee' above) can only be declared once.
#
# This file uses CoffeeScript Object Notation (CSON).
# If you are unfamiliar with CSON, you can read more about it in the
# Atom Flight Manual:
# http://flight-manual.atom.io/using-atom/sections/basic-customization/#_cson
# -----------------------------------------------------------------------------

