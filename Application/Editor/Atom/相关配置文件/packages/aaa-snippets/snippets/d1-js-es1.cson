# js .js 对象及其属性方法--------------------------------------------------------
'.source.js':
  # window ------------------------------------------------
  '-O1 frames 框架集对象':
    'prefix': 'frames-win'
    'body': 'frames'
  '-O1 parseInt(str/num[,radix])  num,返回指定进制的整数值':
    'prefix': 'parseInt-win'
    'body': 'parseInt(str,${1:radix})'
  '-O1 parseFloat(str/num)  num,返回整数值/浮点数值':
    'prefix': 'parseFloat-win'
    'body': 'parseFloat($1)'
  '-O1 encodeURI(str)  str,编码为URI':
    'prefix': 'encodeURI-win'
    'body': 'encodeURI($1)'
  '-O1 decodeURI(uri)  str,解码URI':
    'prefix': 'decodeURI-win'
    'body': 'decodeURI($1)'
  '-O1 encodeURIComponent(str)  str,编码为URI[完全编码]':
    'prefix': 'encodeURIComponent-win'
    'body': 'encodeURIComponent($1)'
  '-O1 decodeURIComponent(uri)  str,解码URI[完全解码]':
    'prefix': 'decodeURIComponent-win'
    'body': 'decodeURIComponent($1)'
  '-O1 escape(str)  str,编码字符串':
    'prefix': 'escape-win'
    'body': 'escape($1)'
  '-O1 unescape(str)  str,解码由escape编码的字符串':
    'prefix': 'unescape-win'
    'body': 'unescape($1)'
  '-O1 isFinite(num)  bol,数值是否有限':
    'prefix': 'isFinite-win'
    'body': 'isFinite($1)'
  '-O1 isNaN(val)  bol,能否转换为NaN':
    'prefix': 'isNaN-win'
    'body': 'isNaN($1)'
  '-O1 eval(JSStr)  解析并执行JS字符串':
    'prefix': 'eval-win'
    'body': 'eval($1)'
  # json ------------------------------------------------
  '-O1 JSON.parse(JSONstr[,foo(key,val)]) obj,解析':
    'prefix': 'JSON.parse'
    'body': 'JSON.parse($1)'
  '-O1 JSON.stringify(val[,arr/foo,num/str]) str,序列化':
    'prefix': 'JSON.stringify'
    'body': 'JSON.stringify($1)'
  # date ------------------------------------------------
  '-O1 new Date([val])  创建时间对象':
    'prefix': 'new-Date'
    'body': 'new Date($1)'
  '-O1 Date.now()  num,自世界协调时间至今的毫秒数':
    'prefix': 'Date-now'
    'body': 'Date.now()'
  '-O1 Date.parse(str/date)  num,日期解析的毫秒数':
    'prefix': 'Date-parse'
    'body': 'Date.parse($1)'
  '-O1 Date.UTC(year,month[,...]) num,表示日期的毫秒数':
    'prefix': 'Date-UTC'
    'body': 'Date.UTC($1)'
  '-O1 .getDate()  num,日数值,1-31':
    'prefix': 'getDate-date'
    'body': 'getDate()'
  '-O1 .getDay()  num,星期数值,0-6':
    'prefix': 'getDay-date'
    'body': 'getDay()'
  '-O1 .getFullYear()  num,年份数值,1970-275760':
    'prefix': 'getFullYear-date'
    'body': 'getFullYear()'
  '-O1 .getHours()  num,小时数值,0-23':
    'prefix': 'getHours-date'
    'body': 'getHours()'
  '-O1 .getMonth()  num,月份数值,0-11':
    'prefix': 'getMonth-date'
    'body': 'getMonth()'
  '-O1 .getMinutes()  num,分钟数值,0-59':
    'prefix': 'getMinutes-date'
    'body': 'getMinutes()'
  '-O1 .getMilliseconds()  num,毫秒数值,0-999':
    'prefix': 'getMilliseconds-date'
    'body': 'getMilliseconds()'
  '-O1 .getSeconds()  num,秒数值,0-59':
    'prefix': 'getSeconds-date'
    'body': 'getSeconds()'
  '-O1 .getTime()  num,时间的毫秒值':
    'prefix': 'getTime-date'
    'body': 'getTime()'
  '-O1 .getTimezoneOffset()  num,当前时区和GMT格林威治时间相差的分钟数值':
    'prefix': 'getTimezoneOffset-date'
    'body': 'getTimezoneOffset()'
  '-O1 .toDateString()':
    'prefix': 'toDateString-date'
    'body': 'toDateString()'
  '-O1 .toLocaleString()':
    'prefix': 'toLocaleString-date'
    'body': 'toLocaleString()'
  '-O1 .toLocaleDateString()':
    'prefix': 'toLocaleDateString-date'
    'body': 'toLocaleDateString()'
  '-O1 .toLocaleTimeString()':
    'prefix': 'toLocaleTimeString-date'
    'body': 'toLocaleTimeString()'
  '-O1 .toTimeString()':
    'prefix': 'toTimeString-date'
    'body': 'toTimeString()'
  '-O1 .toUTCString()':
    'prefix': 'toUTCString-date'
    'body': 'toUTCString()'
  # RegExp ------------------------------------------------
  '-O1 RegExp':
    'prefix': 'RegExp-rgep'
    'body': 'RegExp'
  '-O1 RegExp($1)':
    'prefix': 'RegExp'
    'body': 'RegExp($1)'
  '-O1 RegExp.input  str,当前被匹配的字符串':
    'prefix': 'RegExp-input'
    'body': 'RegExp.input'
  '-O1 RegExp.lastMatch  str,最后一个匹配的字符串':
    'prefix': 'RegExp-lastMatch'
    'body': 'RegExp.lastMatch'
  '-O1 RegExp.lastParen  str,最后一对圆括号内的匹配子串':
    'prefix': 'RegExp-lastParen'
    'body': 'RegExp.lastParen'
  '-O1 RegExp.leftContext  str,最后一次匹配前的子串':
    'prefix': 'RegExp-leftContext'
    'body': 'RegExp.leftContext'
  '-O1 RegExp.multiline  bol,指定是否所的表达式都用于多行的布尔值':
    'prefix': 'RegExp-multiline'
    'body': 'RegExp.multiline'
  '-O1 RegExp.rightContext  str,在上次匹配之后的子串':
    'prefix': 'RegExp-rightContext'
    'body': 'RegExp.rightContext'
  '-O1 .multiline  bol,是否多行匹配':
    'prefix': 'multiline-re'
    'body': 'multiline'
  '-O1 .lastIndex  num,读写下次匹配字符位置的数值表示[在全局匹配时生效],从0开始':
    'prefix': 'lastIndex-re'
    'body': 'lastIndex'
  '-O1 .ignoreCase   bol,是否忽略大小写':
    'prefix': 'ignoreCase-re'
    'body': 'ignoreCase'
  '-O1 .test(str/num)  bol,是否存在于字符串中':
    'prefix': 'test-re'
    'body': 'test($1)'
  '-O1 .exec(str)  arr,正则匹配到的字符串组成的数组':
    'prefix': 'exec-re'
    'body': 'exec($1)'
  # math ------------------------------------------------
  '-O1 Math  数学库对象':
    'prefix': 'Math-math'
    'body': 'Math'
  '-O1 Math.PI  π的值':
    'prefix': 'Math-PI'
    'body': 'Math.PI'
  '-O1 Math.SQRT2  2的平方根':
    'prefix': 'Math-SQRT2'
    'body': 'Math.SQRT2'
  '-O1 Math.SQRT1_2  1/2的平方根':
    'prefix': 'Math-SQRT1_2'
    'body': 'Math.SQRT1_2'
  '-O1 Math.E  自然对数的底数':
    'prefix': 'Math-E'
    'body': 'Math.E'
  '-O1 Math.LN10  10的自然对数':
    'prefix': 'Math-LN10'
    'body': 'Math.LN10'
  '-O1 Math.LN2  2的自然对数':
    'prefix': 'Math-LN2'
    'body': 'Math.LN2'
  '-O1 Math.LOG2E  以2为底e的对数':
    'prefix': 'Math-LOG2E'
    'body': 'Math.LOG2E'
  '-O1 Math.LOG10E  以10为底e的对数':
    'prefix': 'Math-LOG10E'
    'body': 'Math.LOG10E'
  '-O1 Math.random() 0-1间的随机数':
    'prefix': 'Math-random'
    'body': 'Math.random()'
  '-O1 Math.abs(num) 求绝对值':
    'prefix': 'Math-abs'
    'body': 'Math.abs($1)'
  '-O1 Math.ceil($1) 向上取整':
    'prefix': 'Math-ceil'
    'body': 'Math.ceil($1)'
  '-O1 Math.floor($1) 向下取整':
    'prefix': 'Math-floor'
    'body': 'Math.floor($1)'
  '-O1 Math.round($1)  四舍五入取整':
    'prefix': 'Math-round'
    'body': 'Math.round($1)'
  '-O1 Math.exp(num)  Math.E的num次幂':
    'prefix': 'Math-exp'
    'body': 'Math.exp($1)'
  '-O1 Math.log(num)  num的自然对数':
    'prefix': 'Math-log'
    'body': 'Math.log($1)'
  '-O1 Math.pow(num,power) num的power次幂':
    'prefix': 'Math-pow'
    'body': 'Math.pow($1)'
  '-O1 Math.sqrt(num) 平方根':
    'prefix': 'Math-sqrt'
    'body': 'Math.sqrt($1)'
  '-O1 Math.max(num1,num2,..)':
    'prefix': 'Math-max'
    'body': 'Math.max($1)'
  '-O1 Math.min(num1,num2,..)':
    'prefix': 'Math-min'
    'body': 'Math.min($1)'
  '-O1 Math.cos(弧度值)':
    'prefix': 'Math-cos'
    'body': 'Math.cos($1)'
  '-O1 Math.sin(弧度值)':
    'prefix': 'Math-sin'
    'body': 'Math.sin($1)'
  '-O1 Math.tan(弧度值)':
    'prefix': 'Math-tan'
    'body': 'Math.tan($1)'
  '-O1 Math.asin(num)':
    'prefix': 'Math-asin'
    'body': 'Math.asin($1)'
  '-O1 Math.acos(num)':
    'prefix': 'Math-acos'
    'body': 'Math.acos($1)'
  '-O1 Math.atan(num)':
    'prefix': 'Math-atan'
    'body': 'Math.atan($1)'
  '-O1 Math.atan2(num)  num1/num2的反正切值':
    'prefix': 'Math-atan2'
    'body': 'Math.atan2($1)'
  # console ----------------------------------------------------
  '-O1 console  控制台调试对象':
    'prefix': 'console'
    'body': 'console'
  '-O1 .log("%c%s","color:red",str,$1)  带颜色输出':
    'prefix': 'console-log-color'
    'body': 'console.log("%c%s","color:red",666666,$1)'
  '-O1 .info(val1,val2,..)  输出信息性消息':
    'prefix': 'console-info'
    'body': 'console.info($1)'
  '-O1 .warn(val1,val2,..)  输出警告消息':
    'prefix': 'console-warn'
    'body': 'console.warn($1)'
  '-O1 .error(val1,val2,..)  输出错误消息':
    'prefix': 'console-error'
    'body': 'console.error($1)'
  '-O1 .clear()  清除所有输出':
    'prefix': 'console-clear'
    'body': 'console.clear()'
  '-O1 .time("timer1")  计时器开始计时':
    'prefix': 'console-time'
    'body': 'console.time("timer1")'
  '-O1 .timeEnd("timer1")  计时器结束计时并输出':
    'prefix': 'console-timeEnd'
    'body': 'console.timeEnd("timer1")'
  '-O1 .trace("trace1")  调用路径显示':
    'prefix': 'console-trace'
    'body': 'console.trace("trace1")'
  '-O1 .dir($1)  优化对对象的显示':
    'prefix': 'console-dir'
    'body': 'console.dir($1)'
  '-O1 .table(val)  以表格形式输出':
    'prefix': 'console-table'
    'body': 'console.table($1)'
  '-O1 .group($1)  组的开始':
    'prefix': 'console-group'
    'body': 'console.group($1)'
  '-O1 .groupEnd()  组的结束':
    'prefix': 'console-groupEnd'
    'body': 'console.groupEnd()'


