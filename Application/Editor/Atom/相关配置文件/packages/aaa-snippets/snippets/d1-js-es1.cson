# 数据类型&类&常用对象 --------------------------------------------------------
'.source.js':
  # fn ------------------------------------------------
  'es1 Function  函数类型的构造函数':
    'prefix': 'Function-fn'
    'body': 'Function'
  'es1 function  函数':
    'prefix': 'function'
    'body': 'function'
  'es1 function foo(){}  定义函数':
    'prefix': 'function-11'
    'body': '''function $1($2){
      } '''
  'es1 function(){}  匿名函数':
    'prefix': 'function-22'
    'body': '''function($1){
      }'''
  'es1 ;(function (){})()  立即执行的匿名函数':
    'prefix': 'function-33'
    'body': ''';(function ($1){
      })($2)'''
  'es1 fn.name str,函数的名字':
    'prefix': 'name-fn'
    'body': 'name'
  'es1 fn.caller  fn,函数执行时的上层函数':
    'prefix': 'caller-fn'
    'body': 'caller'
  'es1 fn.prototype  obj,构造函数原型':
    'prefix': 'prototype-fn'
    'body': 'prototype'
  'es1 fn.apply(this[,arr])  方法在指定对象上调用':
    'prefix': 'apply-fn'
    'body': 'apply(${1:this},${2:arr})'
  'es1 fn.call(this[,arg1,arg2,...])  方法在指定对象上调用':
    'prefix': 'call-fn'
    'body': """call(${1:this},${2:arg1,arg2,..})"""
  'es1 fn.bind(this[,arg1,arg2,...])  fn,将借用的方法返回':
    'prefix': 'bind-fn'
    'body': 'bind(${1:this},${2:arg1,arg2,..})'
  'es1 arguments  [函数体内]表示函数的参数类数组':
    'prefix': 'arguments-fn'
    'body': 'arguments'
  'es1 arguments.callee  在函数体内表示函数本身':
    'prefix': 'callee-arguments'
    'body': 'callee'
  'es1 ($1) => {$2}  箭头函数,ES6':
    'prefix': 'arrow-function'
    'body': '''($1) => {
        $2
      }'''
  'es1 function* name(){}  Generator函数,ES6':
    'prefix': 'generator-function'
    'body': '''function* $1($2){
        yield
      }'''
  'es1 function* (){}  匿名Generator函数,ES6':
    'prefix': 'generator1-function'
    'body': '''function* $1($2){
        yield
      }'''
  'es1 yield  Generator停止位置,ES6':
    'prefix': 'yield-generator'
    'body': 'yield'
  'es1 yield*  调用另一Generator,ES6':
    'prefix': 'yield1-generator'
    'body': 'yield*'
  'es1 async function name(){}  async函数,ES6':
    'prefix': 'async-function'
    'body': '''async function $1($2){
        $3
      }'''
  'es1 async function (){}  匿名async函数,ES6':
    'prefix': 'async1-function'
    'body': '''async function ($2){
        $3
      }'''
  'es1 await $1  ES6':
    'prefix': 'await-async'
    'body': 'await $1'
  # obj ------------------------------------------------
  'es1 Object  对象的构造函数':
    'prefix': 'Object-obj' # 存在bug
    'body': 'Object'
  'es1 Object.create(protoObj[,configObj])  obj,生成对象':
    'prefix': 'Object-create'
    'body': 'Object.create($1)'
  'es1 Object.is(val1,val2)  bol,值是否相同(按外形比较)':
    'prefix': 'Object-is'
    'body': 'Object.is($1)'
  'es1 Object.keys(obj)  arr,获取可枚举的自有成员':
    'prefix': 'Object-keys'
    'body': 'Object.keys($1)'
  'es1 Object.assign(obj1,obj2,..)  obj,返回合并后的对象':
    'prefix': 'Object-assign'
    'body': 'Object.assign($1)'
  'es1 Object.getPrototypeOf(obj)  obj,原型对象':
    'prefix': 'Object-getPrototypeOf'
    'body': 'Object.getPrototypeOf($1)'
  'es1 Object.setPrototypeOf(obj,proto)  obj,设置对象的原型对象':
    'prefix': 'Object-setPrototypeOf'
    'body': 'Object.setPrototypeOf(obj,proto)'
  'es1 Object.defineProperty(obj,key,{})  定义对象的成员及其特性':
    'prefix': 'Object-defineProperty'
    'body': '''Object.defineProperty(${1:obj},key,{
        // get: function (){
        // },
        // set: function (){
        // },
        value: val,
        writable: true,
        enumerable: true, 
        configurable: true
      })'''
  'es1 Object.defineProperties(obj,configObj)  同时定义多个成员及特性':
    'prefix': 'Object-defineProperties'
    'body': '''Object.defineProperties(${1:obj},{
        aoo: {
          value: 101,
          writable: true,
          enumerable: true,
          configurable: true
        },
        boo: {
          set: function(newVal) {
            // this.xx = newVal
          },
          get: function() {
            // return this.xx
          },
          enumerable: true,
          configurable: true
        }
      })'''
  'es1 Object.getOwnPropertyDescriptor(obj,key)  obj,成员的特性配置信息':
    'prefix': 'Object-getOwnPropertyDescriptor'
    'body': 'Object.getOwnPropertyDescriptor($1)'
  'es1 Object.getOwnPropertyDescriptors(obj)  obj,所有成员的特性配置信息':
    'prefix': 'Object-getOwnPropertyDescriptors'
    'body': 'Object.getOwnPropertyDescriptors($1)'
  'es1 Object.getOwnPropertyNames()  arr,所有[包括不可枚举]的自有成员':
    'prefix': 'Object-getOwnPropertyNames'
    'body': 'Object.getOwnPropertyNames()'
  'es1 Object.preventExtensions(obj)  不可新增成员,仍可修改、删除成员':
    'prefix': 'Object-preventExtensions'
    'body': 'Object.preventExtensions($1)'
  'es1 Object.seal(obj)  不可新增、删除成员,仍可修改成员':
    'prefix': 'Object-seal'
    'body': 'Object.seal($1)'
  'es1 Object.freeze(obj)  不可新增、删除、修改成员':
    'prefix': 'Object-freeze'
    'body': 'Object.freeze($1)'
  'es1 Object.isExtensible(obj)  bol,能否新增成员':
    'prefix': 'Object-isExtensible'
    'body': 'Object.isExtensible($1)'
  'es1 Object.isSealed(obj)  bol,能否新增、删除成员':
    'prefix': 'Object-isSealed'
    'body': 'Object.isSealed($1)'
  'es1 Object.isFrozen(obj)  bol,能否新增、删除及修改成员':
    'prefix': 'Object-isFrozen'
    'body': 'Object.isFrozen($1)'
  'es1 obj.__proto__  obj,原型对象':
    'prefix': 'proto-obj' 
    'body': '__proto__'
  'es1 obj.constructor  fn,构造函数':
    'prefix': 'constructor-obj' # 存在bug,当为 'prefix': 'constructor' 时
    'body': 'constructor'
  'es1 obj.valueOf()  对象转基本类型':
    'prefix': 'valueOf-obj'
    'body': 'valueOf()'
  'es1 obj.toString()  对象字符化':
    'prefix': 'toString-obj'
    'body': 'toString()'
  'es1 obj.toLocaleString()  对象字符化':
    'prefix': 'toLocaleString-obj'
    'body': 'toLocaleString()'
  'es1 pbj.hasOwnProperty(key)  bol,属性是否存在(不包括原型)':
    'prefix': 'hasOwnProperty-obj' # 存在bug 
    'body': 'hasOwnProperty($1)'
  'es1 obj.propertyIsEnumerable(key)  bol,属性能否for-in枚举':
    'prefix': 'propertyIsEnumerable-obj'
    'body': 'propertyIsEnumerable($1)'
  'es1 obj.isPrototypeOf(obj)  bol,是否处于目标对象原型链上':
    'prefix': 'isPrototypeOf-obj'
    'body': 'isPrototypeOf($1)'
  'es1 writable  可写':
    'prefix': 'writable'
    'body': 'writable' 
  'es1 enumerable':
    'prefix': 'enumerable'
    'body': 'enumerable' 
  'es1 configurable  可配置':
    'prefix': 'configurable'
    'body': 'configurable' 
  # bol ------------------------------------------------
  'es1 Boolean  布尔类型构造函数':
    'prefix': 'Boolean-bol'
    'body': 'Boolean'
  'es1 Boolean($1) ':
    'prefix': 'Boolean'
    'body': 'Boolean($1)'
  # num ------------------------------------------------
  'es1 Infinity  ':
    'prefix': 'Infinity'
    'body': 'Infinity'
  'es1 Number  ':
    'prefix': 'Number-num '
    'body': 'Number'
  'es1 Number($1)  ':
    'prefix': 'Number'
    'body': 'Number($1)'
  'es1 Number.NaN  ':
    'prefix': 'Number-NaN'
    'body': 'Number.NaN'
  'es1 Number.MAX_VALUE  ':
    'prefix': 'Number-MAX_VALUE'
    'body': 'Number.MAX_VALUE'
  'es1 Number.MIN_VALUE  ':
    'prefix': 'Number-MIN_VALUE'
    'body': 'Number.MIN_VALUE'
  'es1 Number.NEGATIVE_INFINITY  ':
    'prefix': 'Number-NEGATIVE_INFINITY'
    'body': 'Number.NEGATIVE_INFINITY'
  'es1 Number.POSITIVE_INFINITY  ':
    'prefix': 'Number-POSITIVE_INFINITY'
    'body': 'Number.POSITIVE_INFINITY'
  'es1 Number.MAX_SAFE_INTEGER  ES6':
    'prefix': 'Number-MAX_SAFE_INTEGER'
    'body': 'Number.MAX_SAFE_INTEGER'
  'es1 Number.MIN_SAFE_INTEGER  ES6':
    'prefix': 'Number-MIN_SAFE_INTEGER'
    'body': 'Number.MIN_SAFE_INTEGER'
  'es1 Number.EPSILON  ES6':
    'prefix': 'Number-EPSILON'
    'body': 'Number.EPSILON'
  'es1 Number.isFinite()  ':
    'prefix': 'Number-isFinite'
    'body': 'Number.isFinite()'
  'es1 Number.isInteger()  ':
    'prefix': 'Number-isInteger'
    'body': 'Number.isInteger()'
  'es1 Number.isNaN()  ':
    'prefix': 'Number-isNaN'
    'body': 'Number.isNaN()'
  'es1 Number.isSafeInteger()  ':
    'prefix': 'Number-isSafeInteger'
    'body': 'Number.isSafeInteger()'
  'es1 Number.parseFloat()  ':
    'prefix': 'Number-parseFloat'
    'body': 'Number.parseFloat()'
  'es1 Number.parseInt()  ':
    'prefix': 'Number-parseInt'
    'body': 'Number.parseInt()'
  'es1 Number.isNaN(val)  ES6':
    'prefix': 'Number-isNaN'
    'body': 'Number.isNaN($1)'
  'es1 Number.isFinite(val)  ES6':
    'prefix': 'Number-isFinite'
    'body': 'Number.isFinite($1)'
  'es1 Number.parseInt(str)  ES6':
    'prefix': 'Number-parseInt'
    'body': 'Number.parseInt($1)'
  'es1 Number.parseFloat(str)  ES6':
    'prefix': 'Number-parseFloat'
    'body': 'Number.parseFloat($1)'
  'es1 Number.isInteger(num)  ES6':
    'prefix': 'Number-isInteger'
    'body': 'Number.isInteger($1)'
  'es1 Number.isSafeInteger(num)  ES6':
    'prefix': 'Number-isSafeInteger'
    'body': 'Number.isSafeInteger($1)'
  'es1 num.toFixed(num) str,四舍五入保留num位小数':
    'prefix': 'toFixed-num'
    'body': 'toFixed($1)'
  'es1 num.toExponential(x) str,以科学计数法表示并保留x位小数 ':
    'prefix': 'toExponential-num'
    'body': 'toExponential($1)'
  'es1 num.toPrecision(x) str,以指数或点形式来表示[根据x的长度来决定形式]':
    'prefix': 'toPrecision-num'
    'body': 'toPrecision($1)'
  # str/arr 
  'es1 str/arr.slice(begin[,end]) str,字符/数组截取':
    'prefix': 'slice-str/arr'
    'body': 'slice($1)'
  'es1 str/arr.includes(str/val)  bol,是否包含指定字符串':
    'prefix': 'includes-str/arr'
    'body': 'includes("$1")'
  'es1 str/arr.indexOf(str[,bgn])  idx,指定位置向后首个指定字符串的下标,否则返回-1':
    'prefix': 'indexOf-str/arr'
    'body': 'indexOf($1,0$2)$3'
  'es1 str/arr.lastIndexOf(str[,bgn])  idx,指定位置向前的首个指定字符串的下标,否则返回-1':
    'prefix': 'lastIndexOf-str/arr'
    'body': 'lastIndexOf($1)'
  'es1 str/arr.concat($1)  str,返回拼接后的字符串/数组':
    'prefix': 'concat-str/arr'
    'body': 'concat($1)'
  # str/rgep 
  'es1 .compile(rgep,modifier)  ':
    'prefix': 'compile-str/rgep'
    'body': 'compile($1)'
  # str ------------------------------------------------
  'es1 String  ':
    'prefix': 'String-str'
    'body': 'String'
  'es1 String($1)  ':
    'prefix': 'String'
    'body': 'String($1)'
  'es1 String.fromCharCode(num,num...) str,指定Unicode值对应的字符串':
    'prefix': 'String-fromCharCode'
    'body': 'String.fromCharCode($1)'
  'es1 String.fromCodePoint(num)  ES6':
    'prefix': 'String-fromCodePoint'
    'body': 'String.fromCodePoint($1)'
  'es1 str.charAt(idx)  str,指定下标对应的字符':
    'prefix': 'charAt-str'
    'body': 'charAt($1)'
  'es1 str.charCodeAt(idx)  num,以Unicode编码形式显示指定位置的字符':
    'prefix': 'charCodeAt-str'
    'body': 'charCodeAt($1)'
  'es1 str.substr(begin[,num])  str,截取num个字符 ':
    'prefix': 'substr-str'
    'body': 'substr($1)'
  'es1 str.substring(idx1,idx2)  str,截取字符串':
    'prefix': 'substring-str'
    'body': 'substring($1)'
  'es1 str.match(str/rgep)  arr,指定字符匹配到的数组':
    'prefix': 'match-str'
    'body': 'match($1)'
  'es1 str.localeCompare(str)  num,字符串比较':
    'prefix': 'localeCompare-str'
    'body': 'localeCompare($1)'
  'es1 str.replace(rgep/str,replacement)  str,返回替换后的字符串':
    'prefix': 'replace-str'
    'body': 'replace($1,$2)'
  'es1 str.split(str/rgep)  arr,使用包含的指定字符分割成数组':
    'prefix': 'split-str'
    'body': 'split($1)'
  'es1 str.trim()  str,去除头尾空格并返回':
    'prefix': 'trim-str'
    'body': 'trim()'
  'es1 str.toUpperCase()  str,转换为大写并返回':
    'prefix': 'toUpperCase-str'
    'body': 'toUpperCase()'
  'es1 str.toLowerCase()  str,转换为小写并返回':
    'prefix': 'toLowerCase-str'
    'body': 'toLowerCase()'
  'es1 str.toLocaleLowerCase()  str,转换为本地小写并返回':
    'prefix': 'toLocaleLowerCase-str'
    'body': 'toLocaleLowerCase()'
  'es1 str.toLocaleUpperCase()  str,转换为本地大写并返回':
    'prefix': 'toLocaleUpperCase-str'
    'body': 'toLocaleUpperCase()'
  'es1 str.search(str/rgep)  idx,首个指定字符串的下标,否则返回-1':
    'prefix': 'search-str'
    'body': 'search($1)'
  'es1 str .repeat(num)  ES6':
    'prefix': 'repeat'
    'body': 'repeat($1)'
  'es1 str .startsWith(str[,idx])  ES6':
    'prefix': 'startsWith'
    'body': 'startsWith($1)'
  'es1 str .endsWith(str[,idx])  ES6':
    'prefix': 'endsWith'
    'body': 'endsWith($1)'
  'es1 str .codePointAt()  ES6':
    'prefix': 'codePointAt'
    'body': 'codePointAt()'
  # arr ------------------------------------------------
  'es1 Array':
    'prefix': 'Array-arr'
    'body': 'Array'
  'es1 Array.isArray(arr)  bol,是否为数组':
    'prefix': 'Array-isArray'
    'body': 'Array.isArray($1)'
  'es1 Array.from(arrLike [,mapFoo] [,thisArr])  ES6':
    'prefix': 'Array-from'
    'body': 'Array.from(arrLike ${1:,foo})'
  'es1 Array.of(val1,val2,..)  ES6':
    'prefix': 'Array-of'
    'body': 'Array.of($1)'
  'es1 arr.pop()  val,返回删除的尾部成员':
    'prefix': 'pop-arr'
    'body': 'pop()'
  'es1 arr.shift()  val,返回删除的头部成员':
    'prefix': 'shift-arr'
    'body': 'shift()'
  'es1 arr.push(val1?...)  num,末尾添加成员,返回新数组长度':
    'prefix': 'push-arr'
    'body': 'push($1)'
  'es1 arr.unshift(val1 [,val2,...])  num,头部添加元素,返回新数组长度':
    'prefix': 'unshift-arr'
    'body': 'unshift($1)'
  'es1 arr.splice(begin ,num ,v1,v2,...)  arr,删除[添加]元素,返回由删除的成员组成的数组':
    'prefix': 'splice-arr'
    'body': 'splice(${1:begin},${2:num},${3:v1,v2,...})'
  'es1 arr.reverse()  arr,颠倒所有成员后返回':
    'prefix': 'reverse-arr'
    'body': 'reverse()'
  'es1 arr.sort(foo?)  返回排序后的数组[改变原数组]':
    'prefix': 'sort-arr'
    'body': """sort(${1:function(val1,val2){
      return ${2:true[改变顺序]}
    }})"""
  'es1 arr.join(str?)  str,使用指定字符串连成员':
    'prefix': 'join-arr'
    'body': 'join($1)'
  'es1 arr.forEach(foo)  数组遍历':
    'prefix': 'forEach-arr'
    'body': """forEach(function(val,idx ${1:,arr}){
      $2
    } )"""
  'es1 arr.map(cfoo ,this?)  arr,返回回调返回值组成的数组':
    'prefix': 'map-arr'
    'body': """map(function(val,idx ${1:,arr}){
      return $2
    } )"""
  'es1 arr.every(foo ,this?)  bol,回调返回值是否全部为真':
    'prefix': 'every-arr'
    'body': """every(function(val,idx ${1:,arr}){
      return ${2:[全部为真时,才为真]}
    } )"""
  'es1 arr.some(foo ,this?)  bol,回调返回值是否存在真':
    'prefix': 'some-arr'
    'body': """some(function(val,idx ${1:,arr}){
      return ${2:[若存在返回值为真则返回真]}
    } )"""
  'es1 arr.filter(foo ,this?)  arr,回调返回值为true的元素组成的数组':
    'prefix': 'filter-arr'
    'body': """filter(function(val,idx ${1:,arr}){
        return ${2:true[保留]}
      } )"""
  'es1 arr.reduce(foo ,initVal?)  条件缩减,返回最后一次回调值':
    'prefix': 'reduce-arr'
    'body': """reduce(function(retVal,val,idx ${1:,arr}){ 
      return $2 
    } )"""
  'es1 arr.reduceRight(foo ,initVal?)  同.reduce,只是从右到左遍历':
    'prefix': 'reduceRight-arr'
    'body': """reduceRight(function(retVal,val,idx ${1:,arr}){ 
      return $2 
    } )"""
  'es1 arr.find(fn)  meber,成员查询':
    'prefix': 'find-arr'
    'body': """find(function(meber){ 
      return bol   
    } )"""
  'es1 arr.findIndex(fn)  idx,成员查询':
    'prefix': 'findIndex-arr'
    'body': """findIndex(function(meber){ 
      return bol   
    } )"""
  # RegExp ------------------------------------------------
  'es1 RegExp  ':
    'prefix': 'RegExp-rgep'
    'body': 'RegExp'
  'es1 RegExp($1)  ':
    'prefix': 'RegExp'
    'body': 'RegExp($1)'
  'es1 RegExp.input  str,当前被匹配的字符串':
    'prefix': 'RegExp-input'
    'body': 'RegExp.input'
  'es1 RegExp.lastMatch  str,最后一个匹配的字符串':
    'prefix': 'RegExp-lastMatch'
    'body': 'RegExp.lastMatch'
  'es1 RegExp.lastParen  str,最后一对圆括号内的匹配子串':
    'prefix': 'RegExp-lastParen'
    'body': 'RegExp.lastParen'
  'es1 RegExp.leftContext  str,最后一次匹配前的子串':
    'prefix': 'RegExp-leftContext'
    'body': 'RegExp.leftContext'
  'es1 RegExp.multiline  bol,指定是否所的表达式都用于多行的布尔值':
    'prefix': 'RegExp-multiline'
    'body': 'RegExp.multiline'
  'es1 RegExp.rightContext  str,在上次匹配之后的子串':
    'prefix': 'RegExp-rightContext'
    'body': 'RegExp.rightContext'
  'es1 .multiline  bol,是否多行匹配':
    'prefix': 'multiline-re'
    'body': 'multiline'
  'es1 .lastIndex  num,读写下次匹配字符位置的数值表示[在全局匹配时生效],从0开始':
    'prefix': 'lastIndex-re'
    'body': 'lastIndex'
  'es1 .ignoreCase   bol,是否忽略大小写':
    'prefix': 'ignoreCase-re'
    'body': 'ignoreCase'
  'es1 .test(str/num)  bol,是否存在于字符串中':
    'prefix': 'test-re'
    'body': 'test($1)'
  'es1 .exec(str)  arr,正则匹配到的字符串组成的数组':
    'prefix': 'exec-re'
    'body': 'exec($1)'
  
  # json ------------------------------------------------
  'es1 JSON.parse(JSONstr[,foo(key,val)]) obj,解析':
    'prefix': 'JSON.parse'
    'body': 'JSON.parse($1)'
  'es1 JSON.stringify(val[,arr/foo,num/str]) str,序列化':
    'prefix': 'JSON.stringify'
    'body': 'JSON.stringify($1)'
  # date ------------------------------------------------
  'es1 Date.now()  num,自世界协调时间至今的毫秒数':
    'prefix': 'Date-now'
    'body': 'Date.now()'
  'es1 Date.parse(str/date)  num,日期解析的毫秒数':
    'prefix': 'Date-parse'
    'body': 'Date.parse($1)'
  'es1 Date.UTC(year,month[,...]) num,表示日期的毫秒数':
    'prefix': 'Date-UTC'
    'body': 'Date.UTC($1)'
  'es1 new Date([val])  创建时间对象':
    'prefix': 'new-Date'
    'body': 'new Date($1)'
  'es1 .getDate()  num,日数值,1-31':
    'prefix': 'getDate-date'
    'body': 'getDate()'
  'es1 .getDay()  num,星期数值,0-6':
    'prefix': 'getDay-date'
    'body': 'getDay()'
  'es1 .getFullYear()  num,年份数值,1970-275760':
    'prefix': 'getFullYear-date'
    'body': 'getFullYear()'
  'es1 .getHours()  num,小时数值,0-23':
    'prefix': 'getHours-date'
    'body': 'getHours()'
  'es1 .getMonth()  num,月份数值,0-11':
    'prefix': 'getMonth-date'
    'body': 'getMonth()'
  'es1 .getMinutes()  num,分钟数值,0-59':
    'prefix': 'getMinutes-date'
    'body': 'getMinutes()'
  'es1 .getMilliseconds()  num,毫秒数值,0-999':
    'prefix': 'getMilliseconds-date'
    'body': 'getMilliseconds()'
  'es1 .getSeconds()  num,秒数值,0-59':
    'prefix': 'getSeconds-date'
    'body': 'getSeconds()'
  'es1 .getTime()  num,时间的毫秒值':
    'prefix': 'getTime-date'
    'body': 'getTime()'
  'es1 .getTimezoneOffset()  num,当前时区和GMT格林威治时间相差的分钟数值':
    'prefix': 'getTimezoneOffset-date'
    'body': 'getTimezoneOffset()'
  'es1 .toDateString()':
    'prefix': 'toDateString-date'
    'body': 'toDateString()'
  'es1 .toLocaleString()':
    'prefix': 'toLocaleString-date'
    'body': 'toLocaleString()'
  'es1 .toLocaleDateString()':
    'prefix': 'toLocaleDateString-date'
    'body': 'toLocaleDateString()'
  'es1 .toLocaleTimeString()':
    'prefix': 'toLocaleTimeString-date'
    'body': 'toLocaleTimeString()'
  'es1 .toTimeString()':
    'prefix': 'toTimeString-date'
    'body': 'toTimeString()'
  'es1 .toUTCString()':
    'prefix': 'toUTCString-date'
    'body': 'toUTCString()'
  # math ------------------------------------------------
  'es1 Math  数学库对象':
    'prefix': 'Math-math'
    'body': 'Math'
  'es1 Math.PI  π的值':
    'prefix': 'Math-PI'
    'body': 'Math.PI'
  'es1 Math.SQRT2  2的平方根':
    'prefix': 'Math-SQRT2'
    'body': 'Math.SQRT2'
  'es1 Math.SQRT1_2  1/2的平方根':
    'prefix': 'Math-SQRT1_2'
    'body': 'Math.SQRT1_2'
  'es1 Math.E  自然对数的底数':
    'prefix': 'Math-E'
    'body': 'Math.E'
  'es1 Math.LN10  10的自然对数':
    'prefix': 'Math-LN10'
    'body': 'Math.LN10'
  'es1 Math.LN2  2的自然对数':
    'prefix': 'Math-LN2'
    'body': 'Math.LN2'
  'es1 Math.LOG2E  以2为底e的对数':
    'prefix': 'Math-LOG2E'
    'body': 'Math.LOG2E'
  'es1 Math.LOG10E  以10为底e的对数':
    'prefix': 'Math-LOG10E'
    'body': 'Math.LOG10E'
  'es1 Math.random() 0-1间的随机数':
    'prefix': 'Math-random'
    'body': 'Math.random()'
  'es1 Math.abs(num) 求绝对值':
    'prefix': 'Math-abs'
    'body': 'Math.abs($1)'
  'es1 Math.ceil($1) 向上取整':
    'prefix': 'Math-ceil'
    'body': 'Math.ceil($1)'
  'es1 Math.floor($1) 向下取整':
    'prefix': 'Math-floor'
    'body': 'Math.floor($1)'
  'es1 Math.round($1)  四舍五入取整':
    'prefix': 'Math-round'
    'body': 'Math.round($1)'
  'es1 Math.exp(num)  Math.E的num次幂':
    'prefix': 'Math-exp'
    'body': 'Math.exp($1)'
  'es1 Math.log(num)  num的自然对数':
    'prefix': 'Math-log'
    'body': 'Math.log($1)'
  'es1 Math.pow(num,power) num的power次幂':
    'prefix': 'Math-pow'
    'body': 'Math.pow($1)'
  'es1 Math.sqrt(num) 平方根':
    'prefix': 'Math-sqrt'
    'body': 'Math.sqrt($1)'
  'es1 Math.max(num1,num2,..)  ':
    'prefix': 'Math-max'
    'body': 'Math.max($1)'
  'es1 Math.min(num1,num2,..)  ':
    'prefix': 'Math-min'
    'body': 'Math.min($1)'
  'es1 Math.cos(弧度值)  ':
    'prefix': 'Math-cos'
    'body': 'Math.cos($1)'
  'es1 Math.sin(弧度值)  ':
    'prefix': 'Math-sin'
    'body': 'Math.sin($1)'
  'es1 Math.tan(弧度值)  ':
    'prefix': 'Math-tan'
    'body': 'Math.tan($1)'
  'es1 Math.asin(num)  ':
    'prefix': 'Math-asin'
    'body': 'Math.asin($1)'
  'es1 Math.acos(num)  ':
    'prefix': 'Math-acos'
    'body': 'Math.acos($1)'
  'es1 Math.atan(num)  ':
    'prefix': 'Math-atan'
    'body': 'Math.atan($1)'
  'es1 Math.atan2(num)  num1/num2的反正切值':
    'prefix': 'Math-atan2'
    'body': 'Math.atan2($1)'


