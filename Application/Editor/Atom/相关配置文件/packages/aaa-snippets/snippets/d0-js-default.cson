# js  
'.source.js':
  # 关键字 
  'J00 break':
    'prefix': 'break'
    'body': """break""" 
  'J00 continue':
    'prefix': 'continue'
    'body': 'continue'
  'J00 false':
    'prefix': 'false'
    'body': """false""" 
  'J00 finally':
    'prefix': 'finally'
    'body': """finally""" 
  'J00 public':
    'prefix': 'public'
    'body': """public""" 
  'J00 return':
    'prefix': 'return'
    'body': 'return '
  'J00 static':
    'prefix': 'static'
    'body': """static""" 
  'J00 strict':
    'prefix': 'strict'
    'body': """strict""" 
  'J00 switch':
    'prefix': 'switch1'
    'body': """switch""" 
  'J00 this':
    'prefix': 'this'
    'body': 'this'
  'J00 throw':
    'prefix': 'throw'
    'body': """throw""" 
  'J00 catch':
    'prefix': 'catch'
    'body': """catch""" 
  'J00 undefined':
    'prefix': 'undefined'
    'body': 'undefined' 
  'J00 function  函数':
    'prefix': 'function'
    'body': 'function'
  # 操作符 
  'J00 /* $1 */':
    'prefix': 'zs'
    'body': '/* $1 */'
  'J00 typeof val;  str,值类型检测':
    'prefix': 'typeof-operat'
    'body': 'typeof '
  'J00 obj instanceof Foo;  bol,对象是否继承至构造函数':
    'prefix': 'instanceof-operat'
    'body': """instanceof""" 
  'J00 delete val;  bol,删除对象中的成员[值],返回是否删除成功的布尔值':
    'prefix': 'delete-operat'
    'body': 'delete '
  'J00 prop in obj;  bol,属性是否在对象中[包括原型中属性]':
    'prefix': 'in-operat'
    'body': 'in '
  'J00 void expr;  undefined,执行表达式':
    'prefix': 'void-operat'
    'body': 'void '
  'J00 expr1?expr2:expr3;  三元条件运算符':
    'prefix': 'expr3-operat'
    'body': '?expr2:expr3'
  'J00 try-catch':
    'prefix': 'try-catch'
    'body': """try {
      } 
      catch (e) {
      } 
      finally {
      }"""
  'J00 for (var i = 0; i < $1; i++) { }':
    'prefix': 'for-es'
    'body': """for (var i = 0; i < $1; i++) {
      $2
    }"""
  'J00 for-in;':
    'prefix': 'for-in-es'
    'body': """for(var ${1:key} in ${2:obj}){
      $3
    };"""
  # event name   
  'J00 touchstart  触摸开始':
    'prefix': 'touchstart-eventName'
    'body': 'touchstart'
  'J00 touchend  触摸结束':
    'prefix': 'touchend-eventName'
    'body': 'touchend'
  'J00 touchmove  滑动':
    'prefix': 'touchmove-eventName'
    'body': 'touchmove'
  'J00 focus  获得焦点':
    'prefix': 'focus-eventName'
    'body': 'focus'
  'J00 blur  失去焦点':
    'prefix': 'blur-eventName'
    'body': 'blur'
  'J00 click  点击':
    'prefix': 'click'
    'body': 'click'
  # 自定义组合 ---------------------
  'J00 ajax-pack':
    'prefix': 'ajax-pack'
    'body':  """
      var xhr = new XMLHttpRequest();
      xhr.open('Method', 'Url', true);
      xhr.setRequestHeader('Content-Type', 'application/json'); // 可选
      xhr.onreadystatechange = function() {
        if(xhr.readyState === 4) {
          console.log('state change end', xhr);
          console.log(xhr.status);
          console.log(xhr.response);
          var response = JSON.parse(xhr.response);
          console.log(response);
        } 
        else {
          console.log('change');
        }
      }
      var aoo = { username: 'gua', password: '123', };
      var data = JSON.stringify(aoo);
      xhr.send(data); 
      """


