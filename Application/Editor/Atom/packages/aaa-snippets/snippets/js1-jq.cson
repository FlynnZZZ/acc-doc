# jQuery .js-------------------------------------------------------------------- 
'.source.js':
  # Word --------------------------------------------
  '-jq metaKey':
    'prefix': 'metaKey-jq'
    'body': 'metaKey'
  # $/jQuery --------------------------------------------
  '-jq jQuery($1)  相当于$()':
    'prefix': 'jQuery'
    'body': 'jQuery($1)'
  '-jq jQuery.noConflict()  指定jQuery代理':
    'prefix': 'noConflict-jq'
    'body': 'noConflict()'
  '-jq $(htmlStr/selector/elem)  jEl,获取/创建':
    'prefix': 'jq'
    'body': '$($1)'
  '-jq $("selecor",jEl)  jEl,从jEl后代中筛选':
    'prefix': 'jq-1'
    'body': '$("selecor",jEl)'
  '-jq $.Deferred() ':
    'prefix': 'jq-Deferred'
    'body': '$.Deferred();'
  '-jq $.type(val)  str,类型检测':
    'prefix': 'jq-type'
    'body': '$.type($1);'
  '-jq $.isNumberic(val)  bol,是否为数值':
    'prefix': 'jq-isNumberic'
    'body': '$.isNumberic($1);'
  '-jq $.isFunction(val)  bol,是否为函数':
    'prefix': 'jq-isFunction'
    'body': '$.isFunction($1);'
  '-jq $.isEmptyObject(obj)  bol,对象是否为空':
    'prefix': 'jq-isEmptyObject'
    'body': '$.isEmptyObject($1);'
  '-jq $.isPlainObject(obj)  bol,对象是否为原始对象':
    'prefix': 'jq-isPlainObject'
    'body': '$.isPlainObject($1);'
  '-jq $.isWindow(obj)  bol,是否为window对象':
    'prefix': 'jq-isWindow'
    'body': '$.isWindow($1);'
  '-jq $.trim(str)  str,去除首尾空格':
    'prefix': 'jq-trim'
    'body': '$.trim($1);'
  '-jq $.parseXML(str)  解析字符串得到XML':
    'prefix': 'jq-parseXML'
    'body': '$.parseXML($1);'
  '-jq $.isArray(val)  bol,是否为数组':
    'prefix': 'jq-isArray'
    'body': '$.isArray($1)'
  '-jq $.inArray(item,arr)  num,成员在数组的位置,不存在返回-1':
    'prefix': 'jq-inArray'
    'body': '$.inArray(item,arr)'
  '-jq $.merge(arr1,arr2)  arr,和并两个数组':
    'prefix': 'jq-merge'
    'body': '$.merge(arr1,arr2)'
  '-jq $.unique(arr)  arr,去除后续重复元素':
    'prefix': 'jq-unique'
    'body': '$.unique(arr)'
  '-jq $.each(obj,foo(key,val))  对象遍历':
    'prefix': 'jq-each'
    'body': """$.each(obj,function(key,val){  
      $1
    })"""
  '-jq $.map(arr,foo(val,idx))  arr,遍历得到返回值组成新的数组':
    'prefix': 'jq-map'
    'body': """$.map(arr,function(val,idx){  
      return xxx;
    })"""
  '-jq $.grep(arr,foo(val,idx))  arr,遍历筛选':
    'prefix': 'jq-grep'
    'body': """$.grep(arr,function(val,idx){  
      return bol; // 是否包含该元素 
    })"""
  # jEl --------------------------------------------   
  # 方法  
  '-jq .each(function(){})':
    'prefix': 'each-jq'
    'body': """each(function(idx,domElem){
      $1
    })"""
  # 返回jEl 
  '-jq .clone([bool])  jEl,返回复制的元素':
    'prefix': 'clone-jq'
    'body': 'clone($1)'
  '-jq .first()  jEl,jEl集的第一个':
    'prefix': 'first-jq'
    'body': 'first()'
  '-jq .eq(idx)  jEl,jEl集的第(idx+1)个':
    'prefix': 'eq-jq'
    'body': 'eq($1)'
  '-jq .not(selector/jEl)  jEl,jEl集中的其余':
    'prefix': 'not-jq'
    'body': 'not($1)'
  '-jq .not(foo)  jEl,方法排除':
    'prefix': 'not-jq-foo'
    'body': """not(function(idx){
      $(this)
      return bol; // 是否排除当前jEl 
    })"""
  '-jq .find($1)':
    'prefix': 'find-jq'
    'body': 'find($1)'
  '-jq .closest($1)':
    'prefix': 'closest-jq'
    'body': 'closest($1)'
  '-jq .next(["selector"])':
    'prefix': 'next-jq'
    'body': 'next($1)'
  '-jq .nextAll(["selector"])':
    'prefix': 'nextAll-jq'
    'body': 'nextAll($1)'
  '-jq .siblings("$1")':
    'prefix': 'siblings-jq'
    'body': 'siblings("$1")'
  '-jq .parent(["selector"])':
    'prefix': 'parent-jq'
    'body': 'parent($1)'
  '-jq .parents(["selector"])':
    'prefix': 'parents-jq'
    'body': 'parents($1)'
  '-jq .children(["selector"])':
    'prefix': 'children-jq'
    'body': 'children($1)'
  '-jq .prev(["selector"])':
    'prefix': 'prev-jq'
    'body': 'prev($1)'
  '-jq .prevAll(["selector"])':
    'prefix': 'prevAll-jq'
    'body': 'prevAll($1)'
  '-jq .andSelf($1);':
    'prefix': 'andSelf-jq'
    'body': 'andSelf($1)'
  # DOM操作  
  '-jq .prepend($1)  内部头部插入目标':
    'prefix': 'prepend-jq'
    'body': 'prepend($1)'
  '-jq .prependTo($1)  插入目标的内部头部':
    'prefix': 'prependTo-jq'
    'body': 'prependTo($1)'
  '-jq .append($1)  内部尾部插入目标':
    'prefix': 'append-jq'
    'body': 'append($1)'
  '-jq .appendTo($1)  插入目标的内部尾部':
    'prefix': 'appendTo-jq'
    'body': 'appendTo($1)'
  '-jq .before($1)  外部头部插入目标':
    'prefix': 'before-jq'
    'body': 'before($1)'
  '-jq .insertBefore($1)  插入目标的外部头部':
    'prefix': 'insertBefore-jq'
    'body': 'insertBefore($1)'
  '-jq .after($1);  外部尾部插入目标':
    'prefix': 'after-jq'
    'body': 'after($1)'
  '-jq .insertAfter($1)  插入目标的外部尾部':
    'prefix': 'insertAfter-jq'
    'body': 'insertAfter($1)'
  '-jq .wrap($1);  [每个]元素使用目标包裹':
    'prefix': 'wrap-jq'
    'body': 'wrap($1)'
  '-jq .wrapInner($1);  [每个]元素的内容使用目标包裹':
    'prefix': 'wrapInner-jq'
    'body': 'wrapInner($1)'
  '-jq .wrapAll($1);  [所有]元素使用目标包裹':
    'prefix': 'wrapAll-jq'
    'body': 'wrapAll($1)'
  '-jq .unwrap($1);  去除目标包裹':
    'prefix': 'unwrap-jq'
    'body': 'unwrap($1)'
  '-jq .replaceWith($1)  元素替换成目标':
    'prefix': 'replaceWith-jq'
    'body': 'replaceWith($1)'
  '-jq .replaceAll($1)  目标替换成元素':
    'prefix': 'replaceAll-jq'
    'body': 'replaceAll($1)'
  '-jq .remove()  删除元素':
    'prefix': 'remove-jq'
    'body': 'remove()'
  '-jq .detach()  删除元素,但保留绑定事件、附加数据等':
    'prefix': 'detach-jq'
    'body': 'detach()'
  '-jq .html($1)  设置或获取元素内容':
    'prefix': 'html-jq'
    'body': 'html($1)'
  '-jq .empty()  清空内容':
    'prefix': 'empty-jq'
    'body': 'empty()'
  '-jq .addClass("$1");':
    'prefix': 'addClass-jq'
    'body': 'addClass("$1")'
  '-jq .attr($1)':
    'prefix': 'attr-jq'
    'body': 'attr($1)'
  '-jq .css($1)':
    'prefix': 'css-jq'
    'body': 'css($1)'
  '-jq .data($1)':
    'prefix': 'data-jq'
    'body': 'data($1)'
  '-jq .hasClass("$1")':
    'prefix': 'hasClass-jq'
    'body': 'hasClass("$1")'
  '-jq .index([$1])':
    'prefix': 'index-jq'
    'body': 'index($1)'
  '-jq .innerHeight([$1])':
    'prefix': 'innerHeight-jq'
    'body': 'innerHeight($1)'
  '-jq .innerWidth([$1])':
    'prefix': 'innerWidth-jq'
    'body': 'innerWidth($1)'
  '-jq .val($1);':
    'prefix': 'val-jq'
    'body': 'val($1)'
  '-jq .text($1);':
    'prefix': 'text-jq'
    'body': 'text($1)'
  '-jq .prop($1)':
    'prefix': 'prop-jq'
    'body': 'prop($1)'
  '-jq .offset([{top:num1,left:num2}])':
    'prefix': 'offset-jq'
    'body': 'offset(${1:{top:num1,left:num2}})'
  '-jq .offsetParent()':
    'prefix': 'offsetParent-jq'
    'body': 'offsetParent()'
  '-jq .outerHeight([true])':
    'prefix': 'outerHeight-jq'
    'body': 'outerHeight(${1:true})'
  '-jq .outerWidth([true])':
    'prefix': 'outerWidth-jq'
    'body': 'outerWidth(${1:true})'
  '-jq .position()':
    'prefix': 'position-jq'
    'body': 'position()'
  '-jq .relatedTarget':
    'prefix': 'relatedTarget-jq'
    'body': 'relatedTarget'
  '-jq .removeAttr($1)':
    'prefix': 'removeAttr-jq'
    'body': 'removeAttr($1)'
  '-jq .removeDate($1)':
    'prefix': 'removeDate-jq'
    'body': 'removeDate($1)'
  '-jq .removeClass($1)':
    'prefix': 'removeClass-jq'
    'body': 'removeClass($1)'
  '-jq .scrollLeft([$1])':
    'prefix': 'scrollLeft-jq'
    'body': 'scrollLeft($1)'
  '-jq .scrollTop([$1])':
    'prefix': 'scrollTop-jq'
    'body': 'scrollTop($1)'
  '-jq .select()':
    'prefix': 'select-jq'
    'body': 'select()'
  # 事件  
  '-jq .trigger("event",[]);':
    'prefix': 'trigger-jq'
    'body': 'trigger("${1:click}",[]);'
  '-jq .on("click",cfoo)':
    'prefix': 'on-jq'
    'body': """on("${1:click}",function(e){
        $2
      })"""
  '-jq .one("click",cfoo)':
    'prefix': 'one-jq'
    'body': """on("${1:click}",function(e){
        $2
      })"""
  '-jq .originalEvent':
    'prefix': 'originalEvent-jq'
    'body': 'originalEvent'
  # 动画 
  '-jq .animate(params,time[,duration][,cfoo]);':
    'prefix': 'animate-jq'
    'body': 'animate($1)'
  '-jq .fadeIn([time,cfoo])':
    'prefix': 'fadeIn-jq'
    'body': 'fadeIn(${1:speed,cfoo})'
  '-jq .fadeOut([time,cfoo])':
    'prefix': 'fadeOut-jq'
    'body': 'fadeOut(${1:speed,cfoo})'
  '-jq .fadeToggle([time,cfoo])':
    'prefix': 'fadeToggle-jq'
    'body': 'fadeToggle(${1:speed,cfoo})'
  '-jq .fadeTo(time,opacity,cfoo)':
    'prefix': 'fadeTo-jq'
    'body': 'fadeTo($1)'
  '-jq .hide([time,cfoo])':
    'prefix': 'hide-jq'
    'body': 'hide(${1:speed,cfoo})'
  '-jq .show([time,cfoo])':
    'prefix': 'show-jq'
    'body': 'show(${1:speed,cfoo})'
  '-jq .slideDown([time,cfoo])':
    'prefix': 'slideDown-jq'
    'body': 'slideDown(${1:speed,cfoo})'
  '-jq .slideUp([time,cfoo])':
    'prefix': 'slideUp-jq'
    'body': 'slideUp(${1:speed,cfoo})'
  '-jq .slideToggle([time,cfoo])':
    'prefix': 'slideToggle-jq'
    'body': 'slideToggle(${1:speed,cfoo})'
  '-jq .stop(bool1][,bool2])':
    'prefix': 'stop-jq'
    'body': 'stop(${1:true,true})'
  '-jq .toggle([time,cfoo])':
    'prefix': 'toggle-jq'
    'body': 'toggle(${1:speed,cfoo})'
  '-jq .toggleClass("$1");':
    'prefix': 'toggleClass-jq'
    'body': 'toggleClass("$1");'
  # AJAX --------------------------------------------
  '-jq $.ajaxSetup({})  设置AJAX全局默认选项':
    'prefix': 'jq-ajaxSetup'
    'body': """$.ajaxSetup({ 
        type: 'GET',
        dataType: 'json',
        xhrFields: { withCredentials: true  },
        crossDomain: true, 
        // url: 'url',
        // data: { key : val, }, 
        // contentType:'application/json',
        // cache: true,  
      }) """
  '-jq $.ajax({})  AJAX请求通用方法':
    'prefix': 'jq-ajax'
    'body': """$.ajax({ // 某接口
        url: '_url_'
        ,data: {
          key1: val1
          ,key2: val2
        }
        ,dataType: 'json'
        // ,type: 'GET'
        // ,xhrFields: { withCredentials: true  }
        // ,crossDomain: true
        // ,contentType:'application/json'
        // ,beforeSend: function(){ }
        // ,complete: function(xhr,status){ } 
        // ,cache: true  
      })
      .then(function(backData,statusTxt,xhr){
        console.info(_url_,'某接口',statusTxt);
      }
      ,function(xhr,status,errorTrown){
        console.warn(_url_,'某接口',status);
      }) """
  '-jq $.getScript(url,cfoo);  获取JS文件':
    'prefix': 'jq-getScript'
    'body': """$.getScript("../js.js",function(){
        $1
      });""" 
  '-jq $.getJSON(url,cfoo);  获取JSON文件':
    'prefix': 'jq-getJSON'
    'body': """$.getJSON("../js.json",function(){
        $1
      });""" 
  '-jq $.get(url[,data][,cfoo][,type]);  GET请求':
    'prefix': 'jq-get'
    'body': """$.get("_url_",{},function(){
        $1
      },'json');""" 
  '-jq $.post(url[,data][,cfoo][,type]);  POST请求':
    'prefix': 'jq-post'
    'body': """$.post("_url_",{},function(){
        $1
      },'json');""" 
  '-jq xhrFields: {}  AJAX跨域配置':
    'prefix': 'xhrFields-jq-ajax'
    'body': 'xhrFields: {$1}'
  '-jq withCredentials: true  xhrFields配置,是否可发送cookie':
    'prefix': 'withCredentials-jq-xhrFields'
    'body': 'withCredentials: true'
  '-jq crossDomain: true  是否允许AJAX跨域':
    'prefix': 'crossDomain-jq-ajax'
    'body': 'crossDomain: true'
  '-jq .load(url[,data][,cfoo]);  获取文件并插入到元素中':
    'prefix': 'load-jq'
    'body': """.load("../js.html",function(){
        $1
      });""" 
  '-jq .ajaxStart(cfoo);  全局事件,请求前响应':
    'prefix': 'ajaxStart-jq'
    'body': 'ajaxStart(function(){$1})'
  '-jq .ajaxStop(cfoo);  全局事件,请求结束后响应':
    'prefix': 'ajaxStop-jq'
    'body': 'ajaxStop(function(){$1})'
  
  
