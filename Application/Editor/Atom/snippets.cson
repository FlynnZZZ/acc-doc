'*':
  # self  
  '- TODO ★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★  待处理':
    'prefix': 'TODO-self'
    'body': '// TODO: ★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★ '
  '- PS:  说明':
    'prefix': 'PS-self'
    'body': 'PS: '
  '- Example:  例子':
    'prefix': 'Example-self'
    'body': 'Example: '
  '- Extend:  继承':
    'prefix': 'Extend-self'
    'body': 'Extend: '
  '- Relate:  相关的':
    'prefix': 'Relate-self'
    'body': 'Relate: '
  '- Static:  静态属性':
    'prefix': 'Static-self'
    'body': 'Static: '
  '- Proto:  原型属性':
    'prefix': 'Proto-self'
    'body': 'Proto: '
  '- Instance:  类的实例':
    'prefix': 'Instance-self'
    'body': 'Instance: '
  '- Member:  对象的成员':
    'prefix': 'Member-self'
    'body': 'Member: '
  '- Feature:  特性':
    'prefix': 'Feature-self'
    'body': 'Feature: '
  '- Accu:  总结,积累':
    'prefix': 'Accu-self'
    'body': 'Accu: '
  '- Self:  自己相关':
    'prefix': 'Self-self'
    'body': 'Self: '
  '- More:  更多':
    'prefix': 'More-self'
    'body': 'More: '
  '- Expand:  扩展':
    'prefix': 'Expand-self'
    'body': 'Expand: '
  '- Question:  问题':
    'prefix': 'Question-self'
    'body': 'Question: '
  '- Env:  环境':
    'prefix': 'Env-self'
    'body': 'Env: '
  '- Sit:  网站':
    'prefix': 'Sit-self'
    'body': 'Sit: '
  '- Win:  窗口':
    'prefix': 'Win-self'
    'body': 'Win: '
  '- Pag:  页面/文档':
    'prefix': 'Pag-self'
    'body': 'Pag: '
  '- Elm:  DOM/元素':
    'prefix': 'Elm-self'
    'body': 'Elm: '
  '- Atr:  元素属性':
    'prefix': 'Atr-self'
    'body': 'Atr: '
  '- Evt:  事件':
    'prefix': 'Evt-self'
    'body': 'Evt: '
  '- Kit:  工具/方法':
    'prefix': 'Kit-self'
    'body': 'Kit: '
  '- MoIn:  更多':
    'prefix': 'MoIn-self'
    'body': 'MoIn: '
  '- NdA  不可直接使用':
    'prefix': 'NdA-self'
    'body': 'NdA'
  # word 
  '- template  模板':
    'prefix': 'template-word'
    'body': 'template'
  '- module  模块':
    'prefix': 'module-word'
    'body': 'module'
  '- option  选项':
    'prefix': 'option-word'
    'body': 'option'
  '- alias  别名':
    'prefix': 'alias-word'
    'body': 'alias'
  '- params  参数':
    'prefix': 'params-word'
    'body': 'params'
  # 符号
  '- kh1  括号1':
    'prefix': 'kh1-fh'
    'body': '‹$1›'
  '- kh2  括号2':
    'prefix': 'kh2-fh'
    'body': '«$1»'
'.source.js':
  '- /* $1 */':
    'prefix': 'zs'
    'body': '/* $1 */'
  '- prop  属性,组成部分':
    'prefix': 'prop-word'
    'body': """prop""" 
  '- attr  特性,修饰部分':
    'prefix': 'attr-word'
    'body': """attr""" 
  '- typeof val;  str,值类型检测':
    'prefix': 'typeof-operat'
    'body': 'typeof '
  '- obj instanceof Foo;  bol,对象是否继承至构造函数':
    'prefix': 'instanceof-operat'
    'body': """instanceof""" 
  '- delete val;  bol,删除对象中的成员[值],返回是否删除成功的布尔值':
    'prefix': 'delete-operat'
    'body': 'delete '
  '- prop in obj;  bol,属性是否在对象中[包括原型中属性]':
    'prefix': 'in-operat'
    'body': 'in '
  '- void expr;  undefined,执行表达式':
    'prefix': 'void-operat'
    'body': 'void '
  '- expr1?expr2:expr3;  三元条件运算符':
    'prefix': 'expr3-operat'
    'body': '?expr2:expr3'
  '- try-catch':
    'prefix': 'try-catch'
    'body': """try {
      } 
      catch (e) {
      } 
      finally {
      }"""
  '- for (var i = 0; i < $1; i++) { }':
    'prefix': 'for-es'
    'body': """for (var i = 0; i < $1; i++) {
      $2
    }"""
  '- for-in;':
    'prefix': 'for-in-es'
    'body': """for(var ${1:key} in ${2:obj}){
      $3
    };"""
  # 自定义组合 ---------------------
  '- ajax-pack':
    'prefix': 'ajax-pack'
    'body':  """
      var xhr = new XMLHttpRequest();
      xhr.open('Method', 'Url', true);
      xhr.setRequestHeader('Content-Type', 'application/json'); // 可选
      xhr.onreadystatechange = function() {
        if(xhr.readyState === 4) {
          console.log('state change end', xhr);
          console.log(xhr.status);
          console.log(xhr.response);
          var response = JSON.parse(xhr.response);
          console.log(response);
        } 
        else {
          console.log('change');
        }
      }
      var aoo = { username: 'gua', password: '123', };
      var data = JSON.stringify(aoo);
      xhr.send(data); 
      """
  '- window.screenLeft':
    'prefix': 'screenLeft-window'
    'body': 'window.screenLeft'
  '- window.screenTop':
    'prefix': 'screenTop-window'
    'body': 'window.screenTop'
  '- window.screenX':
    'prefix': 'screenX-window'
    'body': 'window.screenX'
  '- window.screenY':
    'prefix': 'screenY-window'
    'body': 'window.screenY'


# 使用说明 
# e.g.:
#   '-console.log()':            # 提示 显示为
#     'prefix': 'log'            # 激活提示的词 
#     'body': 'console.log($1);' # 最终的结果 
# 语法注释
#   $1 表示光标的默认位置
#   $2 按下 tab 键,光标跳到的第二个位置,以此类推
#   ${1:name} 表示第一次会将 name 选中
#   \n表示换行 \t tab缩进
#   提示 显示 字符开始不可使用下划线符号_
#   """内容""" 创建保持格式的代码块 「"""...""" 代替'...'」
# 当激活字符一样时,后面的会覆盖掉前面的.
# 自定义Snippets的扩展词时,定义的格式的确定
#   在要定义的文档类型下,ctrl-Shift-p 输入代码  Editor: Log Cursor Scope
#   弹出字符如 txt格式的为 text.plain ,则.text.plain类似于.source.js表示一种文件格式
#   注意在前面加一个点.
# 自定义的分类: 
#   按大类划分文档: 避免一个文件中条目过多  
#   文档内的规则: 
#     -obj/Object .xxx  xxxx 类简写或类 
#     -word 单词
#     -eN   事件名 
#     -operat  操作符
#     -xxx  其他 
# Question:
#   

# 原始文档说明 留存 
# Your snippets
#
# Atom snippets allow you to enter a simple prefix in the editor and hit tab to
# expand the prefix into a larger code block with templated values.
#
# You can create a new snippet in this file by typing "snip" and then hitting
# tab.
#
# An example CoffeeScript snippet to expand log to console.log:
#
# '.source.coffee':
#   'Console log':
#     'prefix': 'log'
#     'body': 'console.log $1'
#
# Each scope (e.g. '.source.coffee' above) can only be declared once.
#
# This file uses CoffeeScript Object Notation (CSON).
# If you are unfamiliar with CSON, you can read more about it in the
# Atom Flight Manual:
# http://flight-manual.atom.io/using-atom/sections/basic-customization/#_cson
# -----------------------------------------------------------------------------

